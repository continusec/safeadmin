/*

Copyright 2017 Continusec Pty Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

/*

The following command will rebuild the proto files:

rm -rf pb
mkdir pb
protoc --go_out=plugins=grpc:pb safedump.proto

 */

syntax = "proto3";

package continusec.safedump;
option go_package = "pb";

service SafeDumpService {
    rpc GetPublicCert (GetPublicCertRequest) returns (GetPublicCertResponse) {}
    rpc DecryptSecret (DecryptSecretRequest) returns (DecryptSecretResponse) {}
}

message GetPublicCertRequest {
}

message GetPublicCertResponse {
    bytes der = 1; // DER bytes for X509. This contains the strict TTL of the cert. Don't encrypt anything with a TTL after the NVA
    int64 ttl = 2; // If set, this means, please don't ask for a new cert until after this (unix time in seconds)
}

message DecryptSecretRequest {
    EncryptedHeader header = 1;
}

message DecryptSecretResponse {
    bytes key = 1;
}

message EncryptedHeader {
    bytes spki_fingerprint = 1; // sha256 of the SPKI for the public key used to sign
    int64 ttl = 2;              // unix time in seconds, after which we are out of band
    bytes encrypted_key = 3;    // the encrypted key (OAEP, with label ttl)
}

message ServerConfig {
    string server_cert_path = 1;
    string server_key_path = 2;
    string listen_bind = 3; // e.g. ":10001"
    string archived_keys_dir = 4;
    string listen_protocol = 5; // e.g "tcp4" or "tcp" or "tcp6"
    string max_decryption_period = 6; // golang duration format, e.g. 7d
    string certificate_rotation_period = 7; // golang duration format, e.g. 1d
}

enum ServerProtocol {
    GRPC_PROTOCOL = 0;
    HTTP_PROTOCOL = 1; // since GAE doesn't support GPRC
}

message ClientConfig {
    bool no_grpc_security = 1; // for GRPC_PROTOCOL only
    bool use_system_ca_for_grpc = 2; // for GRPC_PROTOCOL only
    string grpc_cert = 3;   // PEM, for GRPC_PROTOCOL only
    string grpc_server = 4; // host:port, for GRPC_PROTOCOL only
    string http_base_url = 5; // for HTTP_PROTOCOL only
    ServerProtocol protocol = 6;
}

message KeyAndCert {
    GetPublicCertResponse cert = 1;
    bytes key = 2; // DER bytes for PKCS1 RSA Private Key
}
