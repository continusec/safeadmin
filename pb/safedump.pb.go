// Code generated by protoc-gen-go.
// source: safedump.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	safedump.proto

It has these top-level messages:
	GetPublicCertRequest
	GetPublicCertResponse
	DecryptSecretRequest
	DecryptSecretResponse
	EncryptedHeader
	ServerConfig
	ClientConfig
	KeyAndCert
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServerProtocol int32

const (
	ServerProtocol_GRPC_PROTOCOL ServerProtocol = 0
	ServerProtocol_HTTP_PROTOCOL ServerProtocol = 1
)

var ServerProtocol_name = map[int32]string{
	0: "GRPC_PROTOCOL",
	1: "HTTP_PROTOCOL",
}
var ServerProtocol_value = map[string]int32{
	"GRPC_PROTOCOL": 0,
	"HTTP_PROTOCOL": 1,
}

func (x ServerProtocol) String() string {
	return proto.EnumName(ServerProtocol_name, int32(x))
}
func (ServerProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetPublicCertRequest struct {
}

func (m *GetPublicCertRequest) Reset()                    { *m = GetPublicCertRequest{} }
func (m *GetPublicCertRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPublicCertRequest) ProtoMessage()               {}
func (*GetPublicCertRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetPublicCertResponse struct {
	Der []byte `protobuf:"bytes,1,opt,name=der,proto3" json:"der,omitempty"`
	Ttl int64  `protobuf:"varint,2,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *GetPublicCertResponse) Reset()                    { *m = GetPublicCertResponse{} }
func (m *GetPublicCertResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPublicCertResponse) ProtoMessage()               {}
func (*GetPublicCertResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetPublicCertResponse) GetDer() []byte {
	if m != nil {
		return m.Der
	}
	return nil
}

func (m *GetPublicCertResponse) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type DecryptSecretRequest struct {
	Header *EncryptedHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *DecryptSecretRequest) Reset()                    { *m = DecryptSecretRequest{} }
func (m *DecryptSecretRequest) String() string            { return proto.CompactTextString(m) }
func (*DecryptSecretRequest) ProtoMessage()               {}
func (*DecryptSecretRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DecryptSecretRequest) GetHeader() *EncryptedHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type DecryptSecretResponse struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DecryptSecretResponse) Reset()                    { *m = DecryptSecretResponse{} }
func (m *DecryptSecretResponse) String() string            { return proto.CompactTextString(m) }
func (*DecryptSecretResponse) ProtoMessage()               {}
func (*DecryptSecretResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DecryptSecretResponse) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type EncryptedHeader struct {
	SpkiFingerprint []byte `protobuf:"bytes,1,opt,name=spki_fingerprint,json=spkiFingerprint,proto3" json:"spki_fingerprint,omitempty"`
	Ttl             int64  `protobuf:"varint,2,opt,name=ttl" json:"ttl,omitempty"`
	EncryptedKey    []byte `protobuf:"bytes,3,opt,name=encrypted_key,json=encryptedKey,proto3" json:"encrypted_key,omitempty"`
}

func (m *EncryptedHeader) Reset()                    { *m = EncryptedHeader{} }
func (m *EncryptedHeader) String() string            { return proto.CompactTextString(m) }
func (*EncryptedHeader) ProtoMessage()               {}
func (*EncryptedHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EncryptedHeader) GetSpkiFingerprint() []byte {
	if m != nil {
		return m.SpkiFingerprint
	}
	return nil
}

func (m *EncryptedHeader) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *EncryptedHeader) GetEncryptedKey() []byte {
	if m != nil {
		return m.EncryptedKey
	}
	return nil
}

type ServerConfig struct {
	ServerCertPath            string `protobuf:"bytes,1,opt,name=server_cert_path,json=serverCertPath" json:"server_cert_path,omitempty"`
	ServerKeyPath             string `protobuf:"bytes,2,opt,name=server_key_path,json=serverKeyPath" json:"server_key_path,omitempty"`
	ListenBind                string `protobuf:"bytes,3,opt,name=listen_bind,json=listenBind" json:"listen_bind,omitempty"`
	ArchivedKeysDir           string `protobuf:"bytes,4,opt,name=archived_keys_dir,json=archivedKeysDir" json:"archived_keys_dir,omitempty"`
	ListenProtocol            string `protobuf:"bytes,5,opt,name=listen_protocol,json=listenProtocol" json:"listen_protocol,omitempty"`
	MaxDecryptionPeriod       string `protobuf:"bytes,6,opt,name=max_decryption_period,json=maxDecryptionPeriod" json:"max_decryption_period,omitempty"`
	CertificateRotationPeriod string `protobuf:"bytes,7,opt,name=certificate_rotation_period,json=certificateRotationPeriod" json:"certificate_rotation_period,omitempty"`
}

func (m *ServerConfig) Reset()                    { *m = ServerConfig{} }
func (m *ServerConfig) String() string            { return proto.CompactTextString(m) }
func (*ServerConfig) ProtoMessage()               {}
func (*ServerConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ServerConfig) GetServerCertPath() string {
	if m != nil {
		return m.ServerCertPath
	}
	return ""
}

func (m *ServerConfig) GetServerKeyPath() string {
	if m != nil {
		return m.ServerKeyPath
	}
	return ""
}

func (m *ServerConfig) GetListenBind() string {
	if m != nil {
		return m.ListenBind
	}
	return ""
}

func (m *ServerConfig) GetArchivedKeysDir() string {
	if m != nil {
		return m.ArchivedKeysDir
	}
	return ""
}

func (m *ServerConfig) GetListenProtocol() string {
	if m != nil {
		return m.ListenProtocol
	}
	return ""
}

func (m *ServerConfig) GetMaxDecryptionPeriod() string {
	if m != nil {
		return m.MaxDecryptionPeriod
	}
	return ""
}

func (m *ServerConfig) GetCertificateRotationPeriod() string {
	if m != nil {
		return m.CertificateRotationPeriod
	}
	return ""
}

type ClientConfig struct {
	NoGrpcSecurity     bool           `protobuf:"varint,1,opt,name=no_grpc_security,json=noGrpcSecurity" json:"no_grpc_security,omitempty"`
	UseSystemCaForGrpc bool           `protobuf:"varint,2,opt,name=use_system_ca_for_grpc,json=useSystemCaForGrpc" json:"use_system_ca_for_grpc,omitempty"`
	GrpcCert           string         `protobuf:"bytes,3,opt,name=grpc_cert,json=grpcCert" json:"grpc_cert,omitempty"`
	GrpcServer         string         `protobuf:"bytes,4,opt,name=grpc_server,json=grpcServer" json:"grpc_server,omitempty"`
	HttpBaseUrl        string         `protobuf:"bytes,5,opt,name=http_base_url,json=httpBaseUrl" json:"http_base_url,omitempty"`
	Protocol           ServerProtocol `protobuf:"varint,6,opt,name=protocol,enum=continusec.safedump.ServerProtocol" json:"protocol,omitempty"`
}

func (m *ClientConfig) Reset()                    { *m = ClientConfig{} }
func (m *ClientConfig) String() string            { return proto.CompactTextString(m) }
func (*ClientConfig) ProtoMessage()               {}
func (*ClientConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ClientConfig) GetNoGrpcSecurity() bool {
	if m != nil {
		return m.NoGrpcSecurity
	}
	return false
}

func (m *ClientConfig) GetUseSystemCaForGrpc() bool {
	if m != nil {
		return m.UseSystemCaForGrpc
	}
	return false
}

func (m *ClientConfig) GetGrpcCert() string {
	if m != nil {
		return m.GrpcCert
	}
	return ""
}

func (m *ClientConfig) GetGrpcServer() string {
	if m != nil {
		return m.GrpcServer
	}
	return ""
}

func (m *ClientConfig) GetHttpBaseUrl() string {
	if m != nil {
		return m.HttpBaseUrl
	}
	return ""
}

func (m *ClientConfig) GetProtocol() ServerProtocol {
	if m != nil {
		return m.Protocol
	}
	return ServerProtocol_GRPC_PROTOCOL
}

type KeyAndCert struct {
	Cert *GetPublicCertResponse `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	Key  []byte                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *KeyAndCert) Reset()                    { *m = KeyAndCert{} }
func (m *KeyAndCert) String() string            { return proto.CompactTextString(m) }
func (*KeyAndCert) ProtoMessage()               {}
func (*KeyAndCert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *KeyAndCert) GetCert() *GetPublicCertResponse {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *KeyAndCert) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func init() {
	proto.RegisterType((*GetPublicCertRequest)(nil), "continusec.safedump.GetPublicCertRequest")
	proto.RegisterType((*GetPublicCertResponse)(nil), "continusec.safedump.GetPublicCertResponse")
	proto.RegisterType((*DecryptSecretRequest)(nil), "continusec.safedump.DecryptSecretRequest")
	proto.RegisterType((*DecryptSecretResponse)(nil), "continusec.safedump.DecryptSecretResponse")
	proto.RegisterType((*EncryptedHeader)(nil), "continusec.safedump.EncryptedHeader")
	proto.RegisterType((*ServerConfig)(nil), "continusec.safedump.ServerConfig")
	proto.RegisterType((*ClientConfig)(nil), "continusec.safedump.ClientConfig")
	proto.RegisterType((*KeyAndCert)(nil), "continusec.safedump.KeyAndCert")
	proto.RegisterEnum("continusec.safedump.ServerProtocol", ServerProtocol_name, ServerProtocol_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SafeDumpService service

type SafeDumpServiceClient interface {
	GetPublicCert(ctx context.Context, in *GetPublicCertRequest, opts ...grpc.CallOption) (*GetPublicCertResponse, error)
	DecryptSecret(ctx context.Context, in *DecryptSecretRequest, opts ...grpc.CallOption) (*DecryptSecretResponse, error)
}

type safeDumpServiceClient struct {
	cc *grpc.ClientConn
}

func NewSafeDumpServiceClient(cc *grpc.ClientConn) SafeDumpServiceClient {
	return &safeDumpServiceClient{cc}
}

func (c *safeDumpServiceClient) GetPublicCert(ctx context.Context, in *GetPublicCertRequest, opts ...grpc.CallOption) (*GetPublicCertResponse, error) {
	out := new(GetPublicCertResponse)
	err := grpc.Invoke(ctx, "/continusec.safedump.SafeDumpService/GetPublicCert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeDumpServiceClient) DecryptSecret(ctx context.Context, in *DecryptSecretRequest, opts ...grpc.CallOption) (*DecryptSecretResponse, error) {
	out := new(DecryptSecretResponse)
	err := grpc.Invoke(ctx, "/continusec.safedump.SafeDumpService/DecryptSecret", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SafeDumpService service

type SafeDumpServiceServer interface {
	GetPublicCert(context.Context, *GetPublicCertRequest) (*GetPublicCertResponse, error)
	DecryptSecret(context.Context, *DecryptSecretRequest) (*DecryptSecretResponse, error)
}

func RegisterSafeDumpServiceServer(s *grpc.Server, srv SafeDumpServiceServer) {
	s.RegisterService(&_SafeDumpService_serviceDesc, srv)
}

func _SafeDumpService_GetPublicCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafeDumpServiceServer).GetPublicCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.safedump.SafeDumpService/GetPublicCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafeDumpServiceServer).GetPublicCert(ctx, req.(*GetPublicCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafeDumpService_DecryptSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafeDumpServiceServer).DecryptSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.safedump.SafeDumpService/DecryptSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafeDumpServiceServer).DecryptSecret(ctx, req.(*DecryptSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SafeDumpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "continusec.safedump.SafeDumpService",
	HandlerType: (*SafeDumpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicCert",
			Handler:    _SafeDumpService_GetPublicCert_Handler,
		},
		{
			MethodName: "DecryptSecret",
			Handler:    _SafeDumpService_DecryptSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "safedump.proto",
}

func init() { proto.RegisterFile("safedump.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x4e, 0x1b, 0x3d,
	0x14, 0x25, 0x81, 0x8f, 0x2f, 0x5c, 0xf2, 0x87, 0xf9, 0x51, 0x5a, 0x16, 0x45, 0x43, 0xd5, 0x02,
	0x8b, 0x2c, 0x52, 0xa9, 0x9b, 0x56, 0x54, 0x25, 0x29, 0x20, 0xa5, 0x12, 0xd1, 0x24, 0xdd, 0x74,
	0x51, 0xcb, 0xf1, 0xdc, 0x24, 0x56, 0x12, 0xcf, 0xd4, 0xf6, 0x20, 0xe6, 0x29, 0xfa, 0x5e, 0x7d,
	0x8f, 0xbe, 0x47, 0x65, 0xcf, 0x4c, 0x02, 0x34, 0x48, 0xed, 0x6e, 0xe6, 0xdc, 0x7b, 0xee, 0x39,
	0x3e, 0xfe, 0x81, 0xaa, 0x66, 0x23, 0x0c, 0xe2, 0x79, 0xd4, 0x8c, 0x54, 0x68, 0x42, 0xb2, 0xcb,
	0x43, 0x69, 0x84, 0x8c, 0x35, 0xf2, 0x66, 0x5e, 0xf2, 0x0e, 0x60, 0xef, 0x0a, 0x4d, 0x2f, 0x1e,
	0xce, 0x04, 0x6f, 0xa3, 0x32, 0x3e, 0x7e, 0x8f, 0x51, 0x1b, 0xef, 0x1d, 0xec, 0x3f, 0xc2, 0x75,
	0x14, 0x4a, 0x8d, 0xa4, 0x0e, 0xeb, 0x01, 0xaa, 0x46, 0xe1, 0xa8, 0x70, 0x52, 0xf6, 0xed, 0xa7,
	0x45, 0x8c, 0x99, 0x35, 0x8a, 0x47, 0x85, 0x93, 0x75, 0xdf, 0x7e, 0x7a, 0x03, 0xd8, 0xeb, 0x20,
	0x57, 0x49, 0x64, 0xfa, 0xc8, 0x15, 0xe6, 0x43, 0xc9, 0x7b, 0xd8, 0x9c, 0x20, 0xcb, 0xe9, 0xdb,
	0xad, 0x97, 0xcd, 0x15, 0x96, 0x9a, 0x9f, 0xa4, 0xa3, 0x62, 0x70, 0xed, 0x7a, 0xfd, 0x8c, 0xe3,
	0x9d, 0xc2, 0xfe, 0xa3, 0xa9, 0x4b, 0x4b, 0x53, 0x4c, 0x72, 0x4b, 0x53, 0x4c, 0x3c, 0x0d, 0xb5,
	0x47, 0x53, 0xc8, 0x29, 0xd4, 0x75, 0x34, 0x15, 0x74, 0x24, 0xe4, 0x18, 0x55, 0xa4, 0x84, 0x34,
	0x19, 0xa3, 0x66, 0xf1, 0xcb, 0x25, 0xfc, 0xe7, 0x82, 0xc8, 0x31, 0x54, 0x30, 0x9f, 0x47, 0xad,
	0xd6, 0xba, 0x63, 0x96, 0x17, 0x60, 0x17, 0x13, 0xef, 0x67, 0x11, 0xca, 0x7d, 0x54, 0xb7, 0xa8,
	0xda, 0xa1, 0x1c, 0x89, 0x31, 0x39, 0x81, 0xba, 0x76, 0xff, 0x94, 0xa3, 0x32, 0x34, 0x62, 0x66,
	0xe2, 0x24, 0xb7, 0xfc, 0x6a, 0x8a, 0xdb, 0x60, 0x7b, 0xcc, 0x4c, 0xc8, 0x2b, 0xa8, 0x65, 0x9d,
	0x53, 0x4c, 0xd2, 0xc6, 0xa2, 0x6b, 0xac, 0xa4, 0x70, 0x17, 0x13, 0xd7, 0xf7, 0x02, 0xb6, 0x67,
	0x42, 0x1b, 0x94, 0x74, 0x28, 0x64, 0xe0, 0x5c, 0x6c, 0xf9, 0x90, 0x42, 0x17, 0x42, 0x06, 0xe4,
	0x0c, 0x76, 0x98, 0xe2, 0x13, 0x71, 0x9b, 0xfa, 0xd4, 0x34, 0x10, 0xaa, 0xb1, 0xe1, 0xda, 0x6a,
	0x79, 0xa1, 0x8b, 0x89, 0xee, 0x08, 0x45, 0x5e, 0x43, 0x2d, 0x1b, 0xe6, 0xce, 0x07, 0x0f, 0x67,
	0x8d, 0xff, 0x52, 0x77, 0x29, 0xdc, 0xcb, 0x50, 0xd2, 0x82, 0xfd, 0x39, 0xbb, 0xa3, 0x41, 0x1a,
	0xbe, 0x08, 0x25, 0x8d, 0x50, 0x89, 0x30, 0x68, 0x6c, 0xba, 0xf6, 0xdd, 0x39, 0xbb, 0xeb, 0x2c,
	0x6a, 0x3d, 0x57, 0x22, 0xe7, 0x70, 0x68, 0x17, 0x2d, 0x46, 0x82, 0x33, 0x83, 0x54, 0x85, 0x86,
	0xdd, 0x67, 0xfe, 0xef, 0x98, 0xcf, 0xee, 0xb5, 0xf8, 0x59, 0x47, 0xca, 0xf7, 0x7e, 0x14, 0xa1,
	0xdc, 0x9e, 0x09, 0x94, 0x66, 0x19, 0xa6, 0x0c, 0xe9, 0x58, 0x45, 0x9c, 0x6a, 0xe4, 0xb1, 0x12,
	0x26, 0xdd, 0xf1, 0x92, 0x5f, 0x95, 0xe1, 0x95, 0x8a, 0x78, 0x3f, 0x43, 0x49, 0x0b, 0x0e, 0x62,
	0x8d, 0x54, 0x27, 0xda, 0xe0, 0x9c, 0x72, 0x46, 0x47, 0xa1, 0x72, 0x44, 0x97, 0x69, 0xc9, 0x27,
	0xb1, 0xc6, 0xbe, 0x2b, 0xb6, 0xd9, 0x65, 0xa8, 0x2c, 0x97, 0x1c, 0xc2, 0x96, 0x1b, 0x6d, 0x0d,
	0x65, 0xb1, 0x96, 0x2c, 0x60, 0x77, 0xc8, 0xa6, 0x9e, 0xe9, 0xda, 0xbd, 0xc8, 0xe2, 0x84, 0xb1,
	0xd3, 0xb4, 0x08, 0xf1, 0xa0, 0x32, 0x31, 0x26, 0xa2, 0x43, 0xa6, 0x91, 0xc6, 0x2a, 0xcf, 0x71,
	0xdb, 0x82, 0x17, 0x4c, 0xe3, 0x17, 0x35, 0x23, 0x1f, 0xa0, 0xb4, 0x88, 0xd9, 0xe6, 0x56, 0x6d,
	0x1d, 0xaf, 0x3c, 0xfd, 0xe9, 0xc8, 0x3c, 0x7b, 0x7f, 0x41, 0xf2, 0xbe, 0x01, 0x74, 0x31, 0xf9,
	0x28, 0x03, 0xe7, 0xe9, 0x1c, 0x36, 0x9c, 0xd7, 0xf4, 0x22, 0x9d, 0xad, 0x1c, 0xb5, 0xf2, 0x02,
	0xfb, 0x8e, 0x97, 0xdf, 0x99, 0xe2, 0xe2, 0xce, 0x9c, 0xbd, 0x85, 0xea, 0x43, 0x6d, 0xb2, 0x03,
	0x95, 0x2b, 0xbf, 0xd7, 0xa6, 0x3d, 0xff, 0x66, 0x70, 0xd3, 0xbe, 0xf9, 0x5c, 0x5f, 0xb3, 0xd0,
	0xf5, 0x60, 0xd0, 0x5b, 0x42, 0x85, 0xd6, 0xaf, 0x02, 0xd4, 0xfa, 0x6c, 0x84, 0x9d, 0x78, 0x1e,
	0xd9, 0x01, 0x82, 0x23, 0x99, 0x40, 0xe5, 0x81, 0x38, 0x39, 0xfd, 0x1b, 0x83, 0xee, 0x91, 0x78,
	0xfe, 0x0f, 0x6b, 0xf1, 0xd6, 0xac, 0xd2, 0x83, 0x47, 0xe1, 0x09, 0xa5, 0x55, 0xcf, 0xd1, 0x13,
	0x4a, 0x2b, 0xdf, 0x18, 0x6f, 0xed, 0x62, 0xe3, 0x6b, 0x31, 0x1a, 0x0e, 0x37, 0xdd, 0x7e, 0xbc,
	0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x84, 0x90, 0xd7, 0x5d, 0x05, 0x00, 0x00,
}
