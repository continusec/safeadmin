//
//
//Copyright 2017 Continusec Pty Ltd
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: safedump.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetPublicCertRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPublicCertRequest) Reset() {
	*x = GetPublicCertRequest{}
	mi := &file_safedump_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublicCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicCertRequest) ProtoMessage() {}

func (x *GetPublicCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_safedump_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicCertRequest.ProtoReflect.Descriptor instead.
func (*GetPublicCertRequest) Descriptor() ([]byte, []int) {
	return file_safedump_proto_rawDescGZIP(), []int{0}
}

type GetPublicCertResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Der           []byte                 `protobuf:"bytes,1,opt,name=der,proto3" json:"der,omitempty"`  // DER bytes for X509. This contains the strict TTL of the cert. Don't encrypt anything with a TTL after the NVA
	Ttl           int64                  `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"` // If set, this means, please don't ask for a new cert until after this (unix time in seconds)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPublicCertResponse) Reset() {
	*x = GetPublicCertResponse{}
	mi := &file_safedump_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublicCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicCertResponse) ProtoMessage() {}

func (x *GetPublicCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_safedump_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicCertResponse.ProtoReflect.Descriptor instead.
func (*GetPublicCertResponse) Descriptor() ([]byte, []int) {
	return file_safedump_proto_rawDescGZIP(), []int{1}
}

func (x *GetPublicCertResponse) GetDer() []byte {
	if x != nil {
		return x.Der
	}
	return nil
}

func (x *GetPublicCertResponse) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type DecryptSecretRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *EncryptedHeader       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecryptSecretRequest) Reset() {
	*x = DecryptSecretRequest{}
	mi := &file_safedump_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecryptSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptSecretRequest) ProtoMessage() {}

func (x *DecryptSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_safedump_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptSecretRequest.ProtoReflect.Descriptor instead.
func (*DecryptSecretRequest) Descriptor() ([]byte, []int) {
	return file_safedump_proto_rawDescGZIP(), []int{2}
}

func (x *DecryptSecretRequest) GetHeader() *EncryptedHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type DecryptSecretResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecryptSecretResponse) Reset() {
	*x = DecryptSecretResponse{}
	mi := &file_safedump_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecryptSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptSecretResponse) ProtoMessage() {}

func (x *DecryptSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_safedump_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptSecretResponse.ProtoReflect.Descriptor instead.
func (*DecryptSecretResponse) Descriptor() ([]byte, []int) {
	return file_safedump_proto_rawDescGZIP(), []int{3}
}

func (x *DecryptSecretResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type EncryptedHeader struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SpkiFingerprint []byte                 `protobuf:"bytes,1,opt,name=spki_fingerprint,json=spkiFingerprint,proto3" json:"spki_fingerprint,omitempty"` // sha256 of the SPKI for the public key used to sign
	Ttl             int64                  `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`                                               // unix time in seconds, after which we are out of band
	EncryptedKey    []byte                 `protobuf:"bytes,3,opt,name=encrypted_key,json=encryptedKey,proto3" json:"encrypted_key,omitempty"`          // the encrypted key (OAEP, with label ttl)
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EncryptedHeader) Reset() {
	*x = EncryptedHeader{}
	mi := &file_safedump_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptedHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedHeader) ProtoMessage() {}

func (x *EncryptedHeader) ProtoReflect() protoreflect.Message {
	mi := &file_safedump_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedHeader.ProtoReflect.Descriptor instead.
func (*EncryptedHeader) Descriptor() ([]byte, []int) {
	return file_safedump_proto_rawDescGZIP(), []int{4}
}

func (x *EncryptedHeader) GetSpkiFingerprint() []byte {
	if x != nil {
		return x.SpkiFingerprint
	}
	return nil
}

func (x *EncryptedHeader) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *EncryptedHeader) GetEncryptedKey() []byte {
	if x != nil {
		return x.EncryptedKey
	}
	return nil
}

type ServerConfig struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	ServerCertPath            string                 `protobuf:"bytes,1,opt,name=server_cert_path,json=serverCertPath,proto3" json:"server_cert_path,omitempty"`
	ServerKeyPath             string                 `protobuf:"bytes,2,opt,name=server_key_path,json=serverKeyPath,proto3" json:"server_key_path,omitempty"`
	ListenBind                string                 `protobuf:"bytes,3,opt,name=listen_bind,json=listenBind,proto3" json:"listen_bind,omitempty"` // e.g. ":10001"
	ArchivedKeysDir           string                 `protobuf:"bytes,4,opt,name=archived_keys_dir,json=archivedKeysDir,proto3" json:"archived_keys_dir,omitempty"`
	ListenProtocol            string                 `protobuf:"bytes,5,opt,name=listen_protocol,json=listenProtocol,proto3" json:"listen_protocol,omitempty"`                                    // e.g "tcp4" or "tcp" or "tcp6"
	MaxDecryptionPeriod       string                 `protobuf:"bytes,6,opt,name=max_decryption_period,json=maxDecryptionPeriod,proto3" json:"max_decryption_period,omitempty"`                   // golang duration format, e.g. 168h
	CertificateRotationPeriod string                 `protobuf:"bytes,7,opt,name=certificate_rotation_period,json=certificateRotationPeriod,proto3" json:"certificate_rotation_period,omitempty"` // golang duration format, e.g. 24h
	PurgeOldKeys              bool                   `protobuf:"varint,8,opt,name=purge_old_keys,json=purgeOldKeys,proto3" json:"purge_old_keys,omitempty"`                                       // if set, delete old key data automatically
	KeyRetentionPeriod        string                 `protobuf:"bytes,9,opt,name=key_retention_period,json=keyRetentionPeriod,proto3" json:"key_retention_period,omitempty"`                      // golang duration format, how long after a key is expired should we keep it
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ServerConfig) Reset() {
	*x = ServerConfig{}
	mi := &file_safedump_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConfig) ProtoMessage() {}

func (x *ServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_safedump_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConfig.ProtoReflect.Descriptor instead.
func (*ServerConfig) Descriptor() ([]byte, []int) {
	return file_safedump_proto_rawDescGZIP(), []int{5}
}

func (x *ServerConfig) GetServerCertPath() string {
	if x != nil {
		return x.ServerCertPath
	}
	return ""
}

func (x *ServerConfig) GetServerKeyPath() string {
	if x != nil {
		return x.ServerKeyPath
	}
	return ""
}

func (x *ServerConfig) GetListenBind() string {
	if x != nil {
		return x.ListenBind
	}
	return ""
}

func (x *ServerConfig) GetArchivedKeysDir() string {
	if x != nil {
		return x.ArchivedKeysDir
	}
	return ""
}

func (x *ServerConfig) GetListenProtocol() string {
	if x != nil {
		return x.ListenProtocol
	}
	return ""
}

func (x *ServerConfig) GetMaxDecryptionPeriod() string {
	if x != nil {
		return x.MaxDecryptionPeriod
	}
	return ""
}

func (x *ServerConfig) GetCertificateRotationPeriod() string {
	if x != nil {
		return x.CertificateRotationPeriod
	}
	return ""
}

func (x *ServerConfig) GetPurgeOldKeys() bool {
	if x != nil {
		return x.PurgeOldKeys
	}
	return false
}

func (x *ServerConfig) GetKeyRetentionPeriod() string {
	if x != nil {
		return x.KeyRetentionPeriod
	}
	return ""
}

type ClientConfig struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	NoGrpcSecurity bool                   `protobuf:"varint,1,opt,name=no_grpc_security,json=noGrpcSecurity,proto3" json:"no_grpc_security,omitempty"` // for GRPC_PROTOCOL only
	// retired - will always use UNLESS we skip or a cert is specifed. bool use_system_ca_for_grpc = 2; // for GRPC_PROTOCOL only -
	GrpcCert      string `protobuf:"bytes,3,opt,name=grpc_cert,json=grpcCert,proto3" json:"grpc_cert,omitempty"`       // PEM, for GRPC_PROTOCOL only
	GrpcServer    string `protobuf:"bytes,4,opt,name=grpc_server,json=grpcServer,proto3" json:"grpc_server,omitempty"` // host:port, for GRPC_PROTOCOL only
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientConfig) Reset() {
	*x = ClientConfig{}
	mi := &file_safedump_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientConfig) ProtoMessage() {}

func (x *ClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_safedump_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientConfig.ProtoReflect.Descriptor instead.
func (*ClientConfig) Descriptor() ([]byte, []int) {
	return file_safedump_proto_rawDescGZIP(), []int{6}
}

func (x *ClientConfig) GetNoGrpcSecurity() bool {
	if x != nil {
		return x.NoGrpcSecurity
	}
	return false
}

func (x *ClientConfig) GetGrpcCert() string {
	if x != nil {
		return x.GrpcCert
	}
	return ""
}

func (x *ClientConfig) GetGrpcServer() string {
	if x != nil {
		return x.GrpcServer
	}
	return ""
}

type KeyAndCert struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cert          *GetPublicCertResponse `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Key           []byte                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"` // DER bytes for PKCS1 RSA Private Key
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyAndCert) Reset() {
	*x = KeyAndCert{}
	mi := &file_safedump_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyAndCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyAndCert) ProtoMessage() {}

func (x *KeyAndCert) ProtoReflect() protoreflect.Message {
	mi := &file_safedump_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyAndCert.ProtoReflect.Descriptor instead.
func (*KeyAndCert) Descriptor() ([]byte, []int) {
	return file_safedump_proto_rawDescGZIP(), []int{7}
}

func (x *KeyAndCert) GetCert() *GetPublicCertResponse {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *KeyAndCert) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type PersistedObject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ttl           int64                  `protobuf:"varint,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Key           []byte                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PersistedObject) Reset() {
	*x = PersistedObject{}
	mi := &file_safedump_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersistedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistedObject) ProtoMessage() {}

func (x *PersistedObject) ProtoReflect() protoreflect.Message {
	mi := &file_safedump_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistedObject.ProtoReflect.Descriptor instead.
func (*PersistedObject) Descriptor() ([]byte, []int) {
	return file_safedump_proto_rawDescGZIP(), []int{8}
}

func (x *PersistedObject) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *PersistedObject) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PersistedObject) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_safedump_proto protoreflect.FileDescriptor

const file_safedump_proto_rawDesc = "" +
	"\n" +
	"\x0esafedump.proto\"\x16\n" +
	"\x14GetPublicCertRequest\";\n" +
	"\x15GetPublicCertResponse\x12\x10\n" +
	"\x03der\x18\x01 \x01(\fR\x03der\x12\x10\n" +
	"\x03ttl\x18\x02 \x01(\x03R\x03ttl\"@\n" +
	"\x14DecryptSecretRequest\x12(\n" +
	"\x06header\x18\x01 \x01(\v2\x10.EncryptedHeaderR\x06header\")\n" +
	"\x15DecryptSecretResponse\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\"s\n" +
	"\x0fEncryptedHeader\x12)\n" +
	"\x10spki_fingerprint\x18\x01 \x01(\fR\x0fspkiFingerprint\x12\x10\n" +
	"\x03ttl\x18\x02 \x01(\x03R\x03ttl\x12#\n" +
	"\rencrypted_key\x18\x03 \x01(\fR\fencryptedKey\"\xa2\x03\n" +
	"\fServerConfig\x12(\n" +
	"\x10server_cert_path\x18\x01 \x01(\tR\x0eserverCertPath\x12&\n" +
	"\x0fserver_key_path\x18\x02 \x01(\tR\rserverKeyPath\x12\x1f\n" +
	"\vlisten_bind\x18\x03 \x01(\tR\n" +
	"listenBind\x12*\n" +
	"\x11archived_keys_dir\x18\x04 \x01(\tR\x0farchivedKeysDir\x12'\n" +
	"\x0flisten_protocol\x18\x05 \x01(\tR\x0elistenProtocol\x122\n" +
	"\x15max_decryption_period\x18\x06 \x01(\tR\x13maxDecryptionPeriod\x12>\n" +
	"\x1bcertificate_rotation_period\x18\a \x01(\tR\x19certificateRotationPeriod\x12$\n" +
	"\x0epurge_old_keys\x18\b \x01(\bR\fpurgeOldKeys\x120\n" +
	"\x14key_retention_period\x18\t \x01(\tR\x12keyRetentionPeriod\"v\n" +
	"\fClientConfig\x12(\n" +
	"\x10no_grpc_security\x18\x01 \x01(\bR\x0enoGrpcSecurity\x12\x1b\n" +
	"\tgrpc_cert\x18\x03 \x01(\tR\bgrpcCert\x12\x1f\n" +
	"\vgrpc_server\x18\x04 \x01(\tR\n" +
	"grpcServer\"J\n" +
	"\n" +
	"KeyAndCert\x12*\n" +
	"\x04cert\x18\x01 \x01(\v2\x16.GetPublicCertResponseR\x04cert\x12\x10\n" +
	"\x03key\x18\x02 \x01(\fR\x03key\"K\n" +
	"\x0fPersistedObject\x12\x10\n" +
	"\x03ttl\x18\x01 \x01(\x03R\x03ttl\x12\x10\n" +
	"\x03key\x18\x02 \x01(\fR\x03key\x12\x14\n" +
	"\x05value\x18\x03 \x01(\fR\x05value2\x95\x01\n" +
	"\x0fSafeDumpService\x12@\n" +
	"\rGetPublicCert\x12\x15.GetPublicCertRequest\x1a\x16.GetPublicCertResponse\"\x00\x12@\n" +
	"\rDecryptSecret\x12\x15.DecryptSecretRequest\x1a\x16.DecryptSecretResponse\"\x00B$Z\"github.com/continusec/safeadmin/pbb\x06proto3"

var (
	file_safedump_proto_rawDescOnce sync.Once
	file_safedump_proto_rawDescData []byte
)

func file_safedump_proto_rawDescGZIP() []byte {
	file_safedump_proto_rawDescOnce.Do(func() {
		file_safedump_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_safedump_proto_rawDesc), len(file_safedump_proto_rawDesc)))
	})
	return file_safedump_proto_rawDescData
}

var file_safedump_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_safedump_proto_goTypes = []any{
	(*GetPublicCertRequest)(nil),  // 0: GetPublicCertRequest
	(*GetPublicCertResponse)(nil), // 1: GetPublicCertResponse
	(*DecryptSecretRequest)(nil),  // 2: DecryptSecretRequest
	(*DecryptSecretResponse)(nil), // 3: DecryptSecretResponse
	(*EncryptedHeader)(nil),       // 4: EncryptedHeader
	(*ServerConfig)(nil),          // 5: ServerConfig
	(*ClientConfig)(nil),          // 6: ClientConfig
	(*KeyAndCert)(nil),            // 7: KeyAndCert
	(*PersistedObject)(nil),       // 8: PersistedObject
}
var file_safedump_proto_depIdxs = []int32{
	4, // 0: DecryptSecretRequest.header:type_name -> EncryptedHeader
	1, // 1: KeyAndCert.cert:type_name -> GetPublicCertResponse
	0, // 2: SafeDumpService.GetPublicCert:input_type -> GetPublicCertRequest
	2, // 3: SafeDumpService.DecryptSecret:input_type -> DecryptSecretRequest
	1, // 4: SafeDumpService.GetPublicCert:output_type -> GetPublicCertResponse
	3, // 5: SafeDumpService.DecryptSecret:output_type -> DecryptSecretResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_safedump_proto_init() }
func file_safedump_proto_init() {
	if File_safedump_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_safedump_proto_rawDesc), len(file_safedump_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_safedump_proto_goTypes,
		DependencyIndexes: file_safedump_proto_depIdxs,
		MessageInfos:      file_safedump_proto_msgTypes,
	}.Build()
	File_safedump_proto = out.File
	file_safedump_proto_goTypes = nil
	file_safedump_proto_depIdxs = nil
}
