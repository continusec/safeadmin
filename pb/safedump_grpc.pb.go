//
//
//Copyright 2017 Continusec Pty Ltd
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: safedump.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SafeDumpService_GetPublicCert_FullMethodName = "/SafeDumpService/GetPublicCert"
	SafeDumpService_DecryptSecret_FullMethodName = "/SafeDumpService/DecryptSecret"
)

// SafeDumpServiceClient is the client API for SafeDumpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SafeDumpServiceClient interface {
	GetPublicCert(ctx context.Context, in *GetPublicCertRequest, opts ...grpc.CallOption) (*GetPublicCertResponse, error)
	DecryptSecret(ctx context.Context, in *DecryptSecretRequest, opts ...grpc.CallOption) (*DecryptSecretResponse, error)
}

type safeDumpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSafeDumpServiceClient(cc grpc.ClientConnInterface) SafeDumpServiceClient {
	return &safeDumpServiceClient{cc}
}

func (c *safeDumpServiceClient) GetPublicCert(ctx context.Context, in *GetPublicCertRequest, opts ...grpc.CallOption) (*GetPublicCertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublicCertResponse)
	err := c.cc.Invoke(ctx, SafeDumpService_GetPublicCert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeDumpServiceClient) DecryptSecret(ctx context.Context, in *DecryptSecretRequest, opts ...grpc.CallOption) (*DecryptSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecryptSecretResponse)
	err := c.cc.Invoke(ctx, SafeDumpService_DecryptSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SafeDumpServiceServer is the server API for SafeDumpService service.
// All implementations must embed UnimplementedSafeDumpServiceServer
// for forward compatibility.
type SafeDumpServiceServer interface {
	GetPublicCert(context.Context, *GetPublicCertRequest) (*GetPublicCertResponse, error)
	DecryptSecret(context.Context, *DecryptSecretRequest) (*DecryptSecretResponse, error)
	mustEmbedUnimplementedSafeDumpServiceServer()
}

// UnimplementedSafeDumpServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSafeDumpServiceServer struct{}

func (UnimplementedSafeDumpServiceServer) GetPublicCert(context.Context, *GetPublicCertRequest) (*GetPublicCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicCert not implemented")
}
func (UnimplementedSafeDumpServiceServer) DecryptSecret(context.Context, *DecryptSecretRequest) (*DecryptSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptSecret not implemented")
}
func (UnimplementedSafeDumpServiceServer) mustEmbedUnimplementedSafeDumpServiceServer() {}
func (UnimplementedSafeDumpServiceServer) testEmbeddedByValue()                         {}

// UnsafeSafeDumpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SafeDumpServiceServer will
// result in compilation errors.
type UnsafeSafeDumpServiceServer interface {
	mustEmbedUnimplementedSafeDumpServiceServer()
}

func RegisterSafeDumpServiceServer(s grpc.ServiceRegistrar, srv SafeDumpServiceServer) {
	// If the following call pancis, it indicates UnimplementedSafeDumpServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SafeDumpService_ServiceDesc, srv)
}

func _SafeDumpService_GetPublicCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafeDumpServiceServer).GetPublicCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafeDumpService_GetPublicCert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafeDumpServiceServer).GetPublicCert(ctx, req.(*GetPublicCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafeDumpService_DecryptSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafeDumpServiceServer).DecryptSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafeDumpService_DecryptSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafeDumpServiceServer).DecryptSecret(ctx, req.(*DecryptSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SafeDumpService_ServiceDesc is the grpc.ServiceDesc for SafeDumpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SafeDumpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SafeDumpService",
	HandlerType: (*SafeDumpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicCert",
			Handler:    _SafeDumpService_GetPublicCert_Handler,
		},
		{
			MethodName: "DecryptSecret",
			Handler:    _SafeDumpService_DecryptSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "safedump.proto",
}
